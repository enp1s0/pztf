#ifndef __PZTF_ERROR_HPP__
#define __PZTF_ERROR_HPP__
#include <sstream>
#include <vector>
#include <pzcl/pzcl.h>

#ifndef PZTF_CHECK_ERROR
#define PZTF_CHECK_ERROR(status) pztf::error::pzcl_check_error(status, __FILE__, __LINE__, __func__)
#endif
#ifndef PZTF_CHECK_ERROR_M
#define PZTF_CHECK_ERROR_M(status, message) pztf::error::pzcl_check_error(status, __FILE__, __LINE__, __func__, message)
#endif

namespace pztf {
namespace error {
inline std::string get_pzcl_error_string(const cl_int status) {
#define PZCL_STATUS_CASE(x) case (x): return (#x)
	switch(status) {
		PZCL_STATUS_CASE(PZCL_SUCCESS);
		PZCL_STATUS_CASE(PZCL_DEVICE_NOT_FOUND);
		PZCL_STATUS_CASE(PZCL_DEVICE_NOT_AVAILABLE);
		PZCL_STATUS_CASE(PZCL_COMPILER_NOT_AVAILABLE);
		PZCL_STATUS_CASE(PZCL_MEM_OBJECT_ALLOCATION_FAILURE);
		PZCL_STATUS_CASE(PZCL_OUT_OF_RESOURCES);
		PZCL_STATUS_CASE(PZCL_OUT_OF_HOST_MEMORY);
		PZCL_STATUS_CASE(PZCL_PROFILING_INFO_NOT_AVAILABLE);
		PZCL_STATUS_CASE(PZCL_MEM_COPY_OVERLAP);
		PZCL_STATUS_CASE(PZCL_IMAGE_FORMAT_MISMATCH);
		PZCL_STATUS_CASE(PZCL_IMAGE_FORMAT_NOT_SUPPORTED);
		PZCL_STATUS_CASE(PZCL_BUILD_PROGRAM_FAILURE);
		PZCL_STATUS_CASE(PZCL_MAP_FAILURE);
		PZCL_STATUS_CASE(PZCL_MISALIGNED_SUB_BUFFER_OFFSET);
		PZCL_STATUS_CASE(PZCL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST);
		PZCL_STATUS_CASE(PZCL_COMPILE_PROGRAM_FAILURE);
		PZCL_STATUS_CASE(PZCL_LINKER_NOT_AVAILABLE);
		PZCL_STATUS_CASE(PZCL_LINK_PROGRAM_FAILURE);
		PZCL_STATUS_CASE(PZCL_DEVICE_PARTITION_FAILED);
		PZCL_STATUS_CASE(PZCL_KERNEL_ARG_INFO_NOT_AVAILABLE);

		PZCL_STATUS_CASE(PZCL_INVALID_VALUE);
		PZCL_STATUS_CASE(PZCL_INVALID_DEVICE_TYPE);
		PZCL_STATUS_CASE(PZCL_INVALID_PLATFORM);
		PZCL_STATUS_CASE(PZCL_INVALID_DEVICE);
		PZCL_STATUS_CASE(PZCL_INVALID_CONTEXT);
		PZCL_STATUS_CASE(PZCL_INVALID_QUEUE_PROPERTIES);
		PZCL_STATUS_CASE(PZCL_INVALID_COMMAND_QUEUE);
		PZCL_STATUS_CASE(PZCL_INVALID_HOST_PTR);
		PZCL_STATUS_CASE(PZCL_INVALID_MEM_OBJECT);
		PZCL_STATUS_CASE(PZCL_INVALID_IMAGE_FORMAT_DESCRIPTOR);
		PZCL_STATUS_CASE(PZCL_INVALID_IMAGE_SIZE);
		PZCL_STATUS_CASE(PZCL_INVALID_SAMPLER);
		PZCL_STATUS_CASE(PZCL_INVALID_BINARY);
		PZCL_STATUS_CASE(PZCL_INVALID_BUILD_OPTIONS);
		PZCL_STATUS_CASE(PZCL_INVALID_PROGRAM);
		PZCL_STATUS_CASE(PZCL_INVALID_PROGRAM_EXECUTABLE);
		PZCL_STATUS_CASE(PZCL_INVALID_KERNEL_NAME);
		PZCL_STATUS_CASE(PZCL_INVALID_KERNEL_DEFINITION);
		PZCL_STATUS_CASE(PZCL_INVALID_KERNEL);
		PZCL_STATUS_CASE(PZCL_INVALID_ARG_INDEX);
		PZCL_STATUS_CASE(PZCL_INVALID_ARG_VALUE);
		PZCL_STATUS_CASE(PZCL_INVALID_ARG_SIZE);
		PZCL_STATUS_CASE(PZCL_INVALID_KERNEL_ARGS);
		PZCL_STATUS_CASE(PZCL_INVALID_WORK_DIMENSION);
		PZCL_STATUS_CASE(PZCL_INVALID_WORK_GROUP_SIZE);
		PZCL_STATUS_CASE(PZCL_INVALID_WORK_ITEM_SIZE);
		PZCL_STATUS_CASE(PZCL_INVALID_GLOBAL_OFFSET);
		PZCL_STATUS_CASE(PZCL_INVALID_EVENT_WAIT_LIST);
		PZCL_STATUS_CASE(PZCL_INVALID_EVENT);
		PZCL_STATUS_CASE(PZCL_INVALID_OPERATION);
		PZCL_STATUS_CASE(PZCL_INVALID_GL_OBJECT);
		PZCL_STATUS_CASE(PZCL_INVALID_BUFFER_SIZE);
		PZCL_STATUS_CASE(PZCL_INVALID_MIP_LEVEL);
		PZCL_STATUS_CASE(PZCL_INVALID_GLOBAL_WORK_SIZE);
		PZCL_STATUS_CASE(PZCL_INVALID_PROPERTY);
		PZCL_STATUS_CASE(PZCL_INVALID_IMAGE_DESCRIPTOR);
		PZCL_STATUS_CASE(PZCL_INVALID_COMPILER_OPTIONS);
		PZCL_STATUS_CASE(PZCL_INVALID_LINKER_OPTIONS);
		PZCL_STATUS_CASE(PZCL_INVALID_DEVICE_PARTITION_COUNT);
		PZCL_STATUS_CASE(PZCL_INVALID_PIPE_SIZE);
		PZCL_STATUS_CASE(PZCL_INVALID_DEVICE_QUEUE);
	}
}

inline void pzcl_check_error(const cl_int status, const std::string filename, const std::size_t line, const std::string funcname, const std::string message = "") {
	if (status != PZCL_SUCCESS) {
		std::stringstream ss;
		ss << get_pzcl_error_string(status);
		if(message.length() != 0){
			ss << " : " << message;
		}
		ss << " [" << filename << ":" << line << " in " << funcname << "]";
		throw std::runtime_error(ss.str());
	}
}
} // namespace error
} // namespace pztf
#endif
